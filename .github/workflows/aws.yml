name : Deploy to Amazon ECS

on:
  push:
    branches:
      - master
env:
    AWS_REGION: ap-south-1
    ECS_CLUSTER: app_cluster
    CONTAINER_NAME: app
    ECS_SERVICE: app_service
    ECS_TD: workflows/td.json
jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: AKIAXQAABPMX5Y3AETX6
          aws-secret-access-key: 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
          aws-region: ${{ env.AWS_REGION }}
      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Build,tag and push image to ECR
        id: build-image
        env:
          ECR_REGISTRY: "515396172591.dkr.ecr.ap-south-1.amazonaws.com"
          ECR_REPOSITORY: "app_repo"
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >>$GITHUB_OUTPUT

      - name: Fill in the new image ID in the AMZON ECS Task Definition

        id: task-def-1
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TD }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task Definition
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.task-def-1.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability : false

